{"version":3,"sources":["../src/components/Portal/usePortalMountNode.ts"],"sourcesContent":["import * as React from 'react';\nimport {\n  useThemeClassName_unstable as useThemeClassName,\n  useFluent_unstable as useFluent,\n  usePortalMountNode as usePortalMountNodeContext,\n} from '@fluentui/react-shared-contexts';\nimport { mergeClasses } from '@griffel/react';\nimport { useFocusVisible } from '@fluentui/react-tabster';\n\nimport { usePortalMountNodeStylesStyles } from './usePortalMountNodeStyles.styles';\n\nconst useInsertionEffect = (React as never)['useInsertion' + 'Effect'] as typeof React.useLayoutEffect | undefined;\n\nexport type UsePortalMountNodeOptions = {\n  /**\n   * Since hooks cannot be called conditionally use this flag to disable creating the node\n   */\n  disabled?: boolean;\n\n  className?: string;\n};\n\ntype UseElementFactoryOptions = {\n  className: string;\n  dir: string;\n  disabled: boolean | undefined;\n  focusVisibleRef: React.MutableRefObject<HTMLElement | null>;\n  targetNode: HTMLElement | ShadowRoot | undefined;\n};\ntype UseElementFactory = (options: UseElementFactoryOptions) => HTMLDivElement | null;\n\n/**\n * Legacy element factory for React 17 and below. It's not safe for concurrent rendering.\n *\n * Creates a new element on a \"document.body\" to mount portals.\n */\nconst useLegacyElementFactory: UseElementFactory = options => {\n  const { className, dir, focusVisibleRef, targetNode } = options;\n\n  const targetElement = React.useMemo(() => {\n    if (targetNode === undefined || options.disabled) {\n      return null;\n    }\n\n    const element = targetNode.ownerDocument.createElement('div');\n    targetNode.appendChild(element);\n\n    return element;\n  }, [targetNode, options.disabled]);\n\n  // Heads up!\n  // This useMemo() call is intentional for React 17 & below.\n  //\n  // We don't want to re-create the portal element when its attributes change. This also cannot not be done in an effect\n  // because, changing the value of CSS variables after an initial mount will trigger interesting CSS side effects like\n  // transitions.\n  React.useMemo(() => {\n    if (!targetElement) {\n      return;\n    }\n\n    targetElement.className = className;\n    targetElement.setAttribute('dir', dir);\n    targetElement.setAttribute('data-portal-node', 'true');\n\n    // eslint-disable-next-line react-compiler/react-compiler\n    focusVisibleRef.current = targetElement;\n  }, [className, dir, targetElement, focusVisibleRef]);\n\n  React.useEffect(() => {\n    return () => {\n      targetElement?.remove();\n    };\n  }, [targetElement]);\n\n  return targetElement;\n};\n\n/**\n * This is a modern element factory for React 18 and above. It is safe for concurrent rendering.\n *\n * It abuses the fact that React will mount DOM once (unlike hooks), so by using a proxy we can intercept:\n * - the `remove()` method (we call it in `useEffect()`) and remove the element only when the portal is unmounted\n * - all other methods (and properties) will be called by React once a portal is mounted\n */\nconst useModernElementFactory: UseElementFactory = options => {\n  const { className, dir, focusVisibleRef, targetNode } = options;\n\n  const [elementFactory] = React.useState(() => {\n    let currentElement: HTMLDivElement | undefined = undefined;\n\n    function get(targetRoot: HTMLElement | ShadowRoot, forceCreation: false): HTMLDivElement | undefined;\n    function get(targetRoot: HTMLElement | ShadowRoot, forceCreation: true): HTMLDivElement;\n    function get(targetRoot: HTMLElement | ShadowRoot, forceCreation: boolean): HTMLDivElement | undefined {\n      if (currentElement) {\n        return currentElement;\n      }\n\n      if (forceCreation) {\n        currentElement = targetRoot.ownerDocument.createElement('div');\n        targetRoot.appendChild(currentElement);\n      }\n\n      return currentElement;\n    }\n\n    function dispose() {\n      if (currentElement) {\n        currentElement.remove();\n        currentElement = undefined;\n      }\n    }\n\n    return {\n      get,\n      dispose,\n    };\n  });\n\n  const elementProxy = React.useMemo(() => {\n    if (targetNode === undefined || options.disabled) {\n      return null;\n    }\n\n    return new Proxy({} as HTMLDivElement, {\n      get(_, property: keyof HTMLDivElement) {\n        // Heads up!\n        // We intercept the `remove()` method to remove the mount node only when portal has been unmounted already.\n        if (property === 'remove') {\n          const targetElement = elementFactory.get(targetNode, false);\n\n          if (targetElement) {\n            // If the mountElement has children, the portal is still mounted\n            const portalHasNoChildren = targetElement.childNodes.length === 0;\n\n            if (portalHasNoChildren) {\n              return targetElement.remove.bind(targetElement);\n            }\n          }\n\n          return () => {\n            // If the mountElement has children, ignore the remove call\n          };\n        }\n\n        const targetElement = elementFactory.get(targetNode, true);\n        const targetProperty = targetElement[property];\n\n        if (typeof targetProperty === 'function') {\n          return targetProperty.bind(targetElement);\n        }\n\n        return targetProperty;\n      },\n\n      set(_, property: keyof HTMLDivElement, value) {\n        const targetElement = elementFactory.get(targetNode, true);\n\n        if (targetElement) {\n          Object.assign(targetElement, { [property]: value });\n          return true;\n        }\n\n        return false;\n      },\n    });\n  }, [elementFactory, targetNode, options.disabled]);\n\n  React.useEffect(() => {\n    return () => {\n      elementProxy?.remove();\n    };\n  }, [elementProxy]);\n\n  useInsertionEffect!(() => {\n    if (!elementProxy) {\n      return;\n    }\n\n    const classesToApply = className.split(' ').filter(Boolean);\n\n    elementProxy.classList.add(...classesToApply);\n    elementProxy.setAttribute('dir', dir);\n    elementProxy.setAttribute('data-portal-node', 'true');\n\n    focusVisibleRef.current = elementProxy;\n\n    return () => {\n      elementProxy.classList.remove(...classesToApply);\n      elementProxy.removeAttribute('dir');\n    };\n  }, [className, dir, elementProxy, focusVisibleRef]);\n\n  return elementProxy;\n};\n\n/**\n * Creates a new element on a \"document.body\" to mount portals.\n */\nexport const usePortalMountNode = (options: UsePortalMountNodeOptions): HTMLElement | null => {\n  'use no memo';\n\n  const { targetDocument, dir } = useFluent();\n  const mountNode = usePortalMountNodeContext();\n\n  const focusVisibleRef = useFocusVisible<HTMLDivElement>() as React.MutableRefObject<HTMLElement | null>;\n  const classes = usePortalMountNodeStylesStyles();\n  const themeClassName = useThemeClassName();\n\n  const factoryOptions: UseElementFactoryOptions = {\n    dir,\n    disabled: options.disabled,\n    focusVisibleRef,\n\n    className: mergeClasses(themeClassName, classes.root, options.className),\n    targetNode: mountNode ?? targetDocument?.body,\n  };\n\n  if (useInsertionEffect) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    return useModernElementFactory(factoryOptions);\n  }\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return useLegacyElementFactory(factoryOptions);\n};\n"],"names":["usePortalMountNode","useInsertionEffect","React","useLegacyElementFactory","options","className","dir","focusVisibleRef","targetNode","targetElement","useMemo","undefined","disabled","element","ownerDocument","createElement","appendChild","setAttribute","current","useEffect","remove","useModernElementFactory","elementFactory","useState","currentElement","get","targetRoot","forceCreation","dispose","elementProxy","Proxy","_","property","portalHasNoChildren","childNodes","length","bind","targetProperty","set","value","Object","assign","classesToApply","split","filter","Boolean","classList","add","removeAttribute","targetDocument","useFluent","mountNode","usePortalMountNodeContext","useFocusVisible","classes","usePortalMountNodeStylesStyles","themeClassName","useThemeClassName","factoryOptions","mergeClasses","root","body"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}